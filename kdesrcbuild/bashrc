QTDIR=$(grep qtdir $HOME/.kdesrc-buildrc | awk '{ print $2 }' )
KDEDIR=$(grep kdedir $HOME/.kdesrc-buildrc  | awk '{ print $2 }')
KDEDIRS=$KDEDIR
PATH="$KDEDIR/bin:$QTDIR/bin:$PATH"
MANPATH="$QTDIR/doc/man:$MANPATH"

# Act appropriately if LD_LIBRARY_PATH is not already set.
if [ -z $LD_LIBRARY_PATH ]; then
  LD_LIBRARY_PATH=$KDEDIR/lib:$QTDIR/lib
else
  LD_LIBRARY_PATH=$KDEDIR/lib:$QTDIR/lib:$LD_LIBRARY_PATH
fi

export QTDIR KDEDIRS PATH MANPATH LD_LIBRARY_PATH

export PATH=$KDEDIR/bin:$PATH
export LD_LIBRARY_PATH=$KDEDIR/lib:$KDEDIR/lib64:$KDEDIR/lib/x86_64-linux-gnu
export PKG_CONFIG_PATH=$KDEDIR/lib/pkgconfig
export QT_PLUGIN_PATH=$KDEDIR/lib64/plugins:$KDEDIR/lib/x86_64-linux-gnu/plugins:$KDEDIR/lib/x86_64-linux-gnu/kde4/plugins:$KDEDIR/lib64/kde4/plugins
export QML2_IMPORT_PATH=$KDEDIR/lib64/qml/:$KDEDIR/lib/x86_64-linux-gnu/qml
export QML_IMPORT_PATH=$QML2_IMPORT_PATH
export QML_INSTALL_PATH=$KDEDIR/lib64/qml:$KDEDIR/lib/x86_64-linux-gnu/qml
export CPATH=$KDEDIR/include/
export XDG_CONFIG_DIRS=$KDEDIR/share/config:$KDEDIR/etc/xdg
export XDG_DATA_DIRS=$KDEDIR/share/:/usr/share

function run_xvfb ()
{
    export DISPLAY=:99
    sudo Xvfb $DISPLAY +extension RANDR -screen 0 1024x780x24 &
}

function kill_xvfb ()
{
    sudo kill -9 $(pgrep Xvfb)
}

function re_xvfb ()
{
    kill_xvfb
    run_xvfb
}

function run_vnc ()
{
    x11vnc -usepw -display $DISPLAY &
}

function kill_vnc ()
{
    sudo kill -9 $(pgrep x11vnc)
}

function re_vnc ()
{
    kill_vnc
    run_vnc
}

export KDE_BUILD=/work/build
export KDE_SRC=/work/source

##
# A function to easily change to the build directory.
# Usage: cb KDE/kdebase
#   will change to $KDE_BUILD/KDE/kdebase
# Usage: cb
#   will simply go to the build folder if you are currently in a src folder
#   Example:
#     $ pwd
#     /home/user/src/KDE/kdebase
#     $ cb && pwd
#     /home/user/build/KDE/kdebase
#
function cb {
        local dest

    # Make sure build directory exists.
    mkdir -p "$KDE_BUILD"

    # command line argument
    if test -n "$1"; then
        cd "$KDE_BUILD/$1"
        return
    fi
    # substitute src dir with build dir
    dest=`pwd | sed -e s,$KDE_SRC,$KDE_BUILD,`
    if test ! -d "$dest"; then
        # build directory does not exist, create
        mkdir -p "$dest"
    fi
    cd "$dest"
}

##
# Change to the source directory.  Same as cb, except this
# switches to $KDE_SRC instead of $KDE_BUILD.
# Usage: cs KDE/kdebase
#   will change to $KDE_SRC/KDE/kdebase
# Usage: cs
#   will simply go to the source folder if you are currently in a build folder
#   Example:
#     $ pwd
#     /home/myuser/kde/build/master/KDE/kdebase
#     $ cs && pwd
#     /home/myuser/kde/src/master/KDE/kdebase
#
function cs {
        local dest current

    # Make sure source directory exists.
    mkdir -p "$KDE_SRC"

    # command line argument
    if test -n "$1"; then
        cd "$KDE_SRC/$1"
    else
        # substitute build dir with src dir
        dest=`pwd | sed -e s,$KDE_BUILD,$KDE_SRC,`
        current=`pwd`
        if [ "$dest" = "$current" ]; then
            cd "$KDE_SRC"
        else
            cd "$dest"
        fi
    fi
}

##
# Add autocompletion to cs function
#
function _cs_scandir
{
        local base ext

    base=$1
    ext=$2
    if [ -d $base ]; then
        for d in `ls $base`; do
            if [ -d $base/$d ]; then
                dirs="$dirs $ext$d/"
            fi
        done
    fi
}

function _cs()
{
    local cur dirs
    _cs_scandir "$KDE_SRC"
    _cs_scandir "$KDE_SRC/KDE" "KDE/"
    _cs_scandir "$KDE_SRC/kde" "kde/"
    _cs_scandir "$KDE_SRC/kde/pim" "kde/pim/"
    _cs_scandir "$KDE_SRC/frameworks" "frameworks/"
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "${dirs}" -- ${cur}) )
}

# Setup shell
complete -F _cs cs
complete -F _cs cb

if [ "x$START_ICECREAM" = "xtrue" ]; then
    source ~/.start-iceccd.sh
fi

if [ "x$START_XVFB" = "xtrue" ]; then
    run_xvfb
fi

if [ "x$START_IMAP" = "xtrue" ]; then
    sudo saslauthd -a pam &
    sudo /usr/lib/cyrus-imapd/cyrus-master -d
fi

